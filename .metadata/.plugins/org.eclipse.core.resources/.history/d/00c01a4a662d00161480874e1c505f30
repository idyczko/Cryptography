import java.util.Random;

public class DiningCryptographers {
	private int nodes;
	private Topography topography;
	private int payingCryptographer;
	private int[][] network;
	private int[][] communication;
	private int[] announcement;

	public DiningCryptographers(int nodes, Topography topography) {
		this.nodes = nodes;
		this.topography = topography;
		this.network = new int[nodes][nodes];
		if (topography == Topography.RING) {
			createRingTopography();
		} else {
			createNetTopography();
		}
		Random random = new Random();
		if (random.nextBoolean()) {
			this.payingCryptographer = this.nodes;
			return;
		}
		payingCryptographer = random.nextInt(nodes);

	}

	public int getPayingCryptographer() {
		return payingCryptographer;
	}

	public int[][] getCommunication() {
		return communication;
	}

	public int[] getAnnouncement() {
		return announcement;
	}

	public int getNodes() {
		return nodes;
	}

	public Topography getTopography() {
		return topography;
	}

	public int[][] getNetwork() {
		return network;
	}

	private void createNetTopography() {
		for (int i = 0; i < this.nodes; i++) {
			for (int j = 0; j < this.nodes; j++) {
				if (i != j) {
					this.network[i][j] = 1;
				}
			}
		}
	}

	private void createRingTopography() {
		for (int i = 0; i < this.nodes; i++) {
			this.network[i][CustomMathLib.modulo((i - 1),
					this.nodes)] = this.network[i][CustomMathLib.modulo((i + 1), this.nodes)] = 1;
		}
	}

	public void display() {
		for (int i = 0; i < this.nodes; i++) {
			System.out.println();
			for (int j = 0; j < this.nodes; j++) {
				System.out.print(this.network[i][j] + " ");
			}
		}
	}

}
